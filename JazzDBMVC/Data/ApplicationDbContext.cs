//this ApplicationDbContext was generated by a script that ate my database structure hosted on Azure.

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace JazzDBMVC.Data;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext()
    {
    }

    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Album> Albums { get; set; }

    public virtual DbSet<Album> AlbumWithArtists { get; set; }

    public virtual DbSet<AlbumArtist> AlbumArtists { get; set; }

    public virtual DbSet<AlbumGenre> AlbumGenres { get; set; }

    public virtual DbSet<Artist> Artists { get; set; }

    public virtual DbSet<BuildVersion> BuildVersions { get; set; }

    public virtual DbSet<ErrorLog> ErrorLogs { get; set; }

    public virtual DbSet<Featuring> Featurings { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<Track> Tracks { get; set; }

    public virtual DbSet<TrackAlbum> TrackAlbums { get; set; }

    public virtual DbSet<TrackDetail> TrackDetails { get; set; }

    public virtual DbSet<TrackDetail1> TrackDetails1 { get; set; }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();
            optionsBuilder.UseSqlServer(config.GetConnectionString("DefaultConnection"));
        }
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Album>(entity =>
        {
            entity.ToTable("Album");

            entity.Property(e => e.AlbumId)
                .ValueGeneratedNever()
                .HasColumnName("AlbumID");
            entity.Property(e => e.AlbumBlurb).HasMaxLength(280);
            entity.Property(e => e.AlbumName).HasMaxLength(150);
            entity.Property(e => e.AlbumUrl).HasColumnName("AlbumURL");
            entity.Property(e => e.Copyrights).HasMaxLength(300);
            entity.Property(e => e.LabelName).HasMaxLength(300);
        });

        modelBuilder.Entity<AlbumArtist>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AlbumArtist");

            entity.Property(e => e.AlbumId).HasColumnName("AlbumID");
            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");

            entity.HasOne(d => d.Album).WithMany()
                .HasForeignKey(d => d.AlbumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbumArtist_Album");

            entity.HasOne(d => d.Artist).WithMany()
                .HasForeignKey(d => d.ArtistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbumArtist_Artist");
        });

        modelBuilder.Entity<AlbumGenre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AlbumGenre");

            entity.Property(e => e.GenreId).HasColumnName("GenreID");
            entity.Property(e => e.TrackId).HasColumnName("TrackID");

            entity.HasOne(d => d.Genre).WithMany()
                .HasForeignKey(d => d.GenreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbumGenre_Genre");

            entity.HasOne(d => d.Track).WithMany()
                .HasForeignKey(d => d.TrackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlbumGenre_Track");
        });

        modelBuilder.Entity<Artist>(entity =>
        {
            entity.ToTable("Artist");

            entity.Property(e => e.ArtistId)
                .ValueGeneratedNever()
                .HasColumnName("ArtistID");
            entity.Property(e => e.ArtistBlurb).HasMaxLength(280);
            entity.Property(e => e.ArtistName).HasMaxLength(150);
        });

        modelBuilder.Entity<BuildVersion>(entity =>
        {
            entity.HasKey(e => e.SystemInformationId).HasName("PK__BuildVer__35E58ECAA90CC781");

            entity.ToTable("BuildVersion");

            entity.Property(e => e.SystemInformationId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SystemInformationID");
            entity.Property(e => e.DatabaseVersion)
                .HasMaxLength(25)
                .HasColumnName("Database Version");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VersionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ErrorLog>(entity =>
        {
            entity.HasKey(e => e.ErrorLogId).HasName("PK_ErrorLog_ErrorLogID");

            entity.ToTable("ErrorLog");

            entity.Property(e => e.ErrorLogId).HasColumnName("ErrorLogID");
            entity.Property(e => e.ErrorMessage).HasMaxLength(4000);
            entity.Property(e => e.ErrorProcedure).HasMaxLength(126);
            entity.Property(e => e.ErrorTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserName).HasMaxLength(128);
        });

        modelBuilder.Entity<Featuring>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Featuring");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.TrackId).HasColumnName("TrackID");

            entity.HasOne(d => d.Artist).WithMany()
                .HasForeignKey(d => d.ArtistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Featuring_Artist");

            entity.HasOne(d => d.Track).WithMany()
                .HasForeignKey(d => d.TrackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Featuring_Track");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.ToTable("Genre");

            entity.Property(e => e.GenreId)
                .ValueGeneratedNever()
                .HasColumnName("GenreID");
            entity.Property(e => e.GenreBlurb).HasMaxLength(300);
            entity.Property(e => e.GenreName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Track>(entity =>
        {
            entity.ToTable("Track");

            entity.Property(e => e.TrackId)
                .ValueGeneratedNever()
                .HasColumnName("TrackID");
            entity.Property(e => e.DiscNumber)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TrackName).HasMaxLength(150);
            entity.Property(e => e.TrackUrl).HasColumnName("TrackURL");
        });

        modelBuilder.Entity<TrackAlbum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrackAlbum");

            entity.Property(e => e.AlbumId).HasColumnName("AlbumID");
            entity.Property(e => e.TrackId).HasColumnName("TrackID");

            entity.HasOne(d => d.Album).WithMany()
                .HasForeignKey(d => d.AlbumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrackAlbum_Album");

            entity.HasOne(d => d.Track).WithMany()
                .HasForeignKey(d => d.TrackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrackAlbum_Track");
        });

        modelBuilder.Entity<TrackDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrackDetail");

            entity.Property(e => e.Acousticness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Danceability).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Energy).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Instrumentalness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Liveness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Loudness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Speechiness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Tempo).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.TrackId).HasColumnName("TrackID");
            entity.Property(e => e.Valence).HasColumnType("decimal(13, 8)");
        });

        modelBuilder.Entity<TrackDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrackDetails");

            entity.Property(e => e.Acousticness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Danceability).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Energy).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Instrumentalness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Liveness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Loudness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Speechiness).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.Tempo).HasColumnType("decimal(13, 8)");
            entity.Property(e => e.TrackId).HasColumnName("TrackID");
            entity.Property(e => e.Valence).HasColumnType("decimal(13, 8)");

            entity.HasOne(d => d.Track).WithMany()
                .HasForeignKey(d => d.TrackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrackDetails_Track");
        });
        modelBuilder.HasSequence<int>("SalesOrderNumber", "SalesLT");

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
